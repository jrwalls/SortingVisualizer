{"version":3,"sources":["Algorithms/MergeSort.js","Components/AlertHeading.jsx","Components/bigograph.png","Components/ComplexityGraph.jsx","Components/StatusBar.jsx","Components/InfoIcon.jsx","Components/ArrayCounter.jsx","Components/ArrayBars.jsx","Components/ControlPanel.jsx","SortingVisualizer.jsx","Algorithms/BubbleSort.js","Algorithms/SelectionSort.js","App.js","index.js"],"names":["mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMergeSort","AlertHeading","props","state","show","e","this","setState","Alert","variant","onClose","onCloseHandler","dismissible","Heading","style","color","href","React","Component","ComplexityGraph","className","complexity","Image","src","bigograph","fluid","StatusBar","status","InfoIcon","algorithmType","ALGORITHMTYPE","algorithmInfo","algorithmWikiURL","popover","Popover","id","Title","as","Content","target","rel","OverlayTrigger","trigger","placement","overlay","ArrayCounter","size","ArrayBars","map","value","idx","height","ControlPanel","rangeSliderClassName","isDisabled","Container","paddingTop","Row","Col","DropdownButton","title","disabled","Dropdown","Item","onClick","changeAlgorithmType","paddingLeft","type","min","max","onChange","event","resetArray","animationSpeed","changeSpeed","Button","startSort","sortButtonName","SortingVisualizer","bubbleSortAnimation","mergeSortAnimation","selectionSortAnimation","alert","arrayBars","document","getElementsByClassName","random","arrayLength","backgroundColor","isSorted","toggleUserInput","bars","setTimeout","width","firstSort","sorted","temp","bubbleSort","oldPosition","newPosition","oldBarStyle","newBarStyle","currentPosition","lastSort","auxillaryArray","minIndex","selectionSort","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","barIndex","newHeight","barStyle","barOneIdx","barTwoIdx","noGutters","sm","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f0786b79.chunk.js","sourcesContent":["export function mergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMergeSort(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMergeSort(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nclass AlertHeading extends React.Component {\r\n\tconstructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            show: true,\r\n        };\r\n    }\r\n\r\n    //sets the state of show to false to close the alert heading\r\n    onCloseHandler(e) {\r\n    \tthis.setState({ show: false });\r\n    }\r\n\r\n\trender() {\r\n\t\t    return (\r\n\t\t      <Alert show={this.state.show} variant=\"success\" onClose={() => this.onCloseHandler()} dismissible>\r\n\t\t        <Alert.Heading>Sorting Algorithm Visualizer</Alert.Heading>\r\n\t\t        Select an algorithm with the dropdown button, adjust the size and speed as you wish and click on the sort button.\r\n\t\t        To learn more about each algorithm, click the information(🛈) icon. Made by <a style={{ color: \"red\" }} href=\"https://github.com/jrwalls\">GitHub: @jrwalls</a>\r\n\t\t      </Alert>\r\n\t\t    );\r\n\t\t  }\r\n\t}\r\n\r\nexport default AlertHeading;","export default __webpack_public_path__ + \"static/media/bigograph.bb95a658.png\";","import React from 'react';\r\nimport { Image } from 'react-bootstrap';\r\nimport bigograph from './bigograph.png';\r\n\r\nclass ComplexityGraph extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"controls-container\">\r\n            <p className=\"complexity-title\"><b>Complexity: </b>{this.props.complexity}</p>\r\n            <Image className=\"imgfit\" src={bigograph} fluid/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComplexityGraph;","import React from 'react';\r\n\r\nclass StatusBar extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"status-container\">\r\n            <b style={{ color: \"black\" }}>Status:</b> {this.props.status}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React from 'react';\r\nimport { Popover, OverlayTrigger } from 'react-bootstrap';\r\n\r\nlet bubbleSortDescription = \"Bubble Sort works by stepping through the array and repeatedly swapping the adjacent elements if they are in the wrong order.\";\r\nlet mergeSortDescription = \"Merge Sort works on the principle of divide and conquer by repeatedly dividing the array into several subarrays, then merging the subarrays resulting in a sorted array.\";\r\nlet sortingAlgorithmDescription = \"A sorting algorithm is a type of computer algorithm that puts elements of an array in a certain order. Select an algorithm then click me again to learn more!\";\r\nlet selectionSortDescription = \"Selection Sort works by finding the smallest element in an array and putting it at the beginning until the array is sorted.\";\r\n\r\nclass InfoIcon extends React.Component {\r\n    render() {\r\n        //if this.props is empty (no algorithm selected), set default tooltip values\r\n        let algorithmType = !this.props.ALGORITHMTYPE ? \"Sorting Algorithms\" : this.props.ALGORITHMTYPE;\r\n\r\n        //set the default algorithm tooltip value\r\n        let algorithmInfo = sortingAlgorithmDescription;\r\n        let algorithmWikiURL = \"https://en.wikipedia.org/wiki/Sorting_algorithm\";\r\n\r\n        if (algorithmType === \"Bubble Sort\") {\r\n            algorithmInfo = bubbleSortDescription;\r\n            algorithmWikiURL = \"https://en.wikipedia.org/wiki/Bubble_sort\";\r\n        }\r\n        if (algorithmType === \"Merge Sort\") {\r\n            algorithmInfo = mergeSortDescription;\r\n            algorithmWikiURL = \"https://en.wikipedia.org/wiki/Merge_sort\";\r\n        }\r\n        if (algorithmType === \"Selection Sort\") {\r\n            algorithmInfo = selectionSortDescription;\r\n            algorithmWikiURL = \"https://en.wikipedia.org/wiki/Selection_sort\";\r\n        }\r\n\r\n        const popover = (\r\n            <Popover id=\"popover-basic\">\r\n            <Popover.Title as=\"h3\">{algorithmType} Information</Popover.Title>\r\n            <Popover.Content>\r\n            <p>{algorithmInfo}</p>\r\n            <b>Read more:</b> <a href={algorithmWikiURL} target=\"_blank\" rel=\"noreferrer\">Wiki/{algorithmType}</a> \r\n            </Popover.Content>\r\n            </Popover>\r\n        );\r\n        return(\r\n            <div className=\"info-icon\">\r\n            <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n            <h3>🛈</h3>\r\n            </OverlayTrigger>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InfoIcon;","import React from 'react';\r\n\r\nclass ArrayCounter extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"array-counter\">\r\n            Size: {this.props.size}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArrayCounter;","import React from 'react';\r\nimport InfoIcon from './InfoIcon.jsx';\r\nimport ArrayCounter from './ArrayCounter.jsx';\r\n\r\nclass ArrayBars extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"array-container\">\r\n            <InfoIcon ALGORITHMTYPE={this.props.ALGORITHMTYPE} />\r\n            <ArrayCounter size={this.props.size} />\r\n                {this.props.array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{height: `${value}px`}}>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArrayBars;","import React from 'react';\r\nimport { Container, Row, Col, Button, DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nclass ControlPanel extends React.Component {\r\n    render() {\r\n        //swap range slider classes to color/grey gradients if control panel buttons become disabled\r\n        let rangeSliderClassName = (this.props.isDisabled) ? \"slider-disabled\" : 'slider-enabled';\r\n        return(\r\n            <div className=\"controls-container\">\r\n                <Container>\r\n                    <div style={{paddingTop: \"10px\"}}>\r\n                        <Row>\r\n                            <Col>\r\n                                <p><b>Control Panel</b></p>\r\n                                <DropdownButton variant=\"dark\" size=\"sm\" title=\"Algorithms \" id=\"bg-nested-dropdown\" disabled={this.props.isDisabled}>\r\n                                    <Dropdown.Item onClick={() => this.props.changeAlgorithmType(\"Bubble Sort\")}>Bubble Sort</Dropdown.Item>\r\n                                    <Dropdown.Item onClick={() => this.props.changeAlgorithmType(\"Selection Sort\")}>Selection Sort</Dropdown.Item>\r\n                                    <Dropdown.Item onClick={() => this.props.changeAlgorithmType(\"Merge Sort\")}>Merge Sort</Dropdown.Item>\r\n                                </DropdownButton>\r\n                                </Col>\r\n                                </Row>\r\n                                <Row style={{paddingTop: \"10px\"}}>\r\n                                <Col><label style={{paddingLeft: \"15px\"}}>Size: <input type=\"range\" min=\"10\" max=\"200\" value={this.props.size} disabled={this.props.isDisabled} onChange={(event) => this.props.resetArray(event.target.value)} className={rangeSliderClassName}/></label></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                <Col><label>Speed: <input type=\"range\" min=\"1\" max=\"10\" value={this.props.animationSpeed} disabled={this.props.isDisabled} onChange={(event) => this.props.changeSpeed(event.target.value)} className={`reverse-slider ${rangeSliderClassName}`}/></label></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                <Col><Button variant=\"dark\" size=\"sm\" disabled={this.props.isDisabled} onClick={() => this.props.resetArray()}>Randomize Array</Button></Col>\r\n                                </Row>\r\n                                <Row>\r\n                            <Col style={{paddingTop: \"10px\"}}><Button variant=\"danger\" size=\"sm\" disabled={this.props.isDisabled} onClick={() => this.props.startSort()}>{this.props.sortButtonName}</Button></Col>\r\n                        </Row>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","import React from 'react';\r\n\r\n//importing css and react-bootstrap components\r\nimport Loader from \"react-loader-spinner\"; \r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n//importing sorting algorithms (to return the animation positions array of indexes)\r\nimport { bubbleSort } from './Algorithms/BubbleSort.js';\r\nimport { selectionSort } from './Algorithms/SelectionSort.js';\r\nimport { mergeSort } from './Algorithms/MergeSort.js';\r\n\r\n//importing components\r\nimport AlertHeading from './Components/AlertHeading.jsx';\r\nimport ComplexityGraph from './Components/ComplexityGraph.jsx';\r\nimport StatusBar from './Components/StatusBar.jsx';\r\nimport ArrayBars from './Components/ArrayBars.jsx';\r\nimport ControlPanel from './Components/ControlPanel.jsx';\r\n\r\n//parent component to components in \"./Components/...\"\r\nclass SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            array: [], \r\n            size: 100, \r\n            animationSpeed: 2.5, \r\n            isDisabled: false,\r\n            sortButtonName: \"Sort!\",\r\n            ALGORITHMTYPE: \"\",\r\n            status: \"Select An Algorithm...\",\r\n            complexity: \"O(?) Time | O(?) Space\",\r\n            isSorted: false,\r\n        };\r\n    }\r\n\r\n    //generate and display array after component mounts\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    //changes the algorithm type. \r\n    //algorithm type used to decide which sorting animation to display in the startsort() method\r\n    changeAlgorithmType = (e) => {\r\n        this.ALGORITHMTYPE = e;\r\n        if (this.ALGORITHMTYPE === \"Bubble Sort\") {\r\n            this.setState({ complexity: \"O(n^2) Time | O(1) Space\" });\r\n            this.setState({ status: this.ALGORITHMTYPE + \" Selected!\"})\r\n        }\r\n\r\n        if (this.ALGORITHMTYPE === \"Selection Sort\") {\r\n            this.setState({ complexity: \"O(n^2) Time | O(1) Space\" });\r\n            this.setState({ status: this.ALGORITHMTYPE + \" Selected!\"})\r\n        } \r\n\r\n        if (this.ALGORITHMTYPE === \"Merge Sort\") {\r\n            this.setState({ complexity: \"O(nlog(n)) Time | O(log(n)) Space\" });\r\n            this.setState({ status: this.ALGORITHMTYPE + \" Selected!\"})\r\n        }\r\n    }\r\n\r\n    //starts sorting animation according to which algorithm has been selected\r\n    startSort = () => {\r\n        if (this.ALGORITHMTYPE === \"Bubble Sort\") {\r\n            this.bubbleSortAnimation();\r\n        } \r\n\r\n        if (this.ALGORITHMTYPE === \"Merge Sort\") {\r\n            this.mergeSortAnimation();\r\n        }\r\n\r\n        if (this.ALGORITHMTYPE === \"Selection Sort\") {\r\n            this.selectionSortAnimation();\r\n        }\r\n\r\n        //alert the user if no algorithm has been selected and ALGORITHMTYPE is undefined\r\n        if (!this.ALGORITHMTYPE) {\r\n            alert(\"Please choose an algorithm!\");\r\n        }\r\n    }\r\n\r\n    //call when array needs to be generated/regenerated\r\n    resetArray = (e) => {\r\n        const array = [];\r\n        //prevents array size from turning to 0 if called from button click in render\r\n        if (e) {\r\n        this.setState({ size: e });\r\n        }\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        for (let i = 0; i < this.state.size; i++) {\r\n            //pushes a randomly generated int of range 1-250 to the state array\r\n            array.push(Math.floor((Math.random() * 250) + 1));\r\n        }\r\n        this.setState({ array });\r\n        var arrayLength = arrayBars.length;\r\n        for (let i = 0; i < arrayLength; i++) {\r\n            var jBarStyle = arrayBars[i].style;\r\n            jBarStyle.backgroundColor = \"red\";\r\n        }\r\n\r\n        //if isSorted is true when entering this method, the array is sorted. \r\n        //reset status before setting isSorted state to false\r\n        if (this.state.isSorted === true) {\r\n            this.setState({ status: this.ALGORITHMTYPE + \" Selected!\" });\r\n        } \r\n        \r\n        //if resetArray is called, the array is no longer sorted so set isSorted to false\r\n        this.setState({ isSorted: false });\r\n    }\r\n\r\n    //call before a sorting algorithm begins to update the status and disable the control panel buttons\r\n    firstSort() {\r\n        this.setState({ status: this.ALGORITHMTYPE + \" Running\" })\r\n        this.toggleUserInput();\r\n    }\r\n\r\n    //call after sorting algorithm is sorted to turn array bars green and re-enable control panel buttons\r\n    lastSort() {\r\n        const bars = document.getElementsByClassName(\"array-bar\");\r\n        var arrayLength = bars.length;\r\n        for (let i = 0; i < arrayLength; i++) {\r\n            setTimeout(() => {\r\n                var barStyle = bars[i].style;\r\n                barStyle.backgroundColor = \"limegreen\";\r\n            }, i * this.state.animationSpeed);\r\n        }\r\n            this.toggleUserInput();\r\n            this.setState({ sortButtonName: \"Sort!\" });\r\n            this.setState({ status: this.ALGORITHMTYPE + \" done! Please regenerate the array.\"});\r\n            this.setState({ isSorted: true });\r\n    }\r\n\r\n    //toggles control panel component buttons and sets the sort button to a loading animation\r\n    toggleUserInput() {\r\n        this.setState({ isDisabled: !this.state.isDisabled });\r\n        this.setState({ sortButtonName: <Loader type=\"ThreeDots\" color=\"white\" height={10} width={40} /> });\r\n    }\r\n\r\n    //changes the speed of the sorting animation\r\n    changeSpeed = (e) => {\r\n        this.setState({ animationSpeed: e });\r\n    }\r\n\r\n    //**Sorting Algorithm animations**\r\n    bubbleSortAnimation() {\r\n        //check to see if array has been sorted, if so, alert the user to regenerate the array\r\n        if (this.state.isSorted) {\r\n            alert(\"Array has already been sorted. Please generate a new array.\");\r\n        } else {\r\n            this.firstSort();\r\n            const animations = bubbleSort(this.state.array);\r\n            const bars = document.getElementsByClassName(\"array-bar\");\r\n            for (let i = 0; i < animations.length; i++) {\r\n                setTimeout(() => {\r\n                    var [oldPosition, newPosition] = animations[i];\r\n                    var oldBarStyle = bars[oldPosition].style;\r\n                    var newBarStyle = bars[newPosition].style;\r\n                    var temp = this.state.array[oldPosition];\r\n                    this.state.array[oldPosition] = this.state.array[newPosition];\r\n                    this.state.array[newPosition] = temp;\r\n                    oldBarStyle.height = `${this.state.array[oldPosition]}px`;\r\n                    newBarStyle.height = `${this.state.array[newPosition]}px`;\r\n                    oldBarStyle.backgroundColor = \"red\";\r\n                    newBarStyle.backgroundColor = \"white\";\r\n                    var currentPosition = oldPosition;\r\n                    for (let j = 0; j < currentPosition; j++) {\r\n                        var jbar = bars[j].style;\r\n                        jbar.backgroundColor = \"red\";\r\n                    }\r\n                    if (i === animations.length - 1) {\r\n                        this.lastSort();\r\n                    }\r\n                }, i * this.state.animationSpeed);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectionSortAnimation() {\r\n        //check to see if array has been sorted, if so, alert the user to regenerate the array\r\n        if (this.state.isSorted) {\r\n            alert(\"Array has already been sorted. Please generate a new array.\");\r\n        } else {\r\n            this.firstSort();\r\n            const [animations] = selectionSort(this.state.array);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            for (let i = 0; i < animations.length; i++) {\r\n                const isColorChange = (animations[i][0] === \"firstComparison\") || (animations[i][0] === \"secondComparison\");\r\n                if(isColorChange === true) {\r\n                    const color = (animations[i][0] === \"firstComparison\") ? \"white\" : \"red\";\r\n                    const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIndex].style;\r\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = color;\r\n                        barTwoStyle.backgroundColor = color;\r\n                    },i * this.state.animationSpeed);\r\n                }\r\n                else {\r\n                    const [temp, barIndex, newHeight] = animations[i];\r\n                    const barStyle = arrayBars[barIndex].style;\r\n                    setTimeout(() => {\r\n                        barStyle.height = `${newHeight}px`;\r\n                        if (i === animations.length - 1) {\r\n                            this.lastSort();\r\n                        }\r\n                    },i * this.state.animationSpeed);  \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    mergeSortAnimation() {\r\n    //check to see if array has been sorted, if so, alert the user to regenerate the array\r\n    if (this.state.isSorted) {\r\n            alert(\"Array has already been sorted. Please generate a new array.\");\r\n        } else {\r\n            setTimeout(() => {\r\n                this.firstSort();\r\n                const animations = mergeSort(this.state.array);\r\n                for (let i = 0; i < animations.length; i++) {\r\n                    const arrayBars = document.getElementsByClassName('array-bar');\r\n                    const isColorChange = i % 3 !== 2;\r\n                    if (isColorChange) {\r\n                        const [barOneIdx, barTwoIdx] = animations[i];\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                        const color = i % 3 === 0 ? \"white\" : \"red\";\r\n                        setTimeout(() => {\r\n                            barOneStyle.backgroundColor = color;\r\n                            barTwoStyle.backgroundColor = color;\r\n                        }, i * this.state.animationSpeed);\r\n                        } else {\r\n                            setTimeout(() => {\r\n                              const [barOneIdx, newHeight] = animations[i];\r\n                              const barOneStyle = arrayBars[barOneIdx].style;\r\n                              barOneStyle.height = `${newHeight}px`;\r\n                              if (i === animations.length - 1) {\r\n                                    this.lastSort();\r\n                                }\r\n                            }, i * this.state.animationSpeed);\r\n                        }\r\n                    }\r\n                }, 1);\r\n            }\r\n        }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <AlertHeading />\r\n                <Row>\r\n                    <Col>\r\n                        <ArrayBars \r\n                            array={this.state.array}\r\n                            ALGORITHMTYPE={this.ALGORITHMTYPE}\r\n                            size={this.state.size}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <StatusBar \r\n                            status={this.state.status} />\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters={true}>\r\n                    <Col sm={7}>\r\n                            <ControlPanel \r\n                                isDisabled={this.state.isDisabled}\r\n                                sortButtonName={this.state.sortButtonName}\r\n                                animationSpeed={this.state.animationSpeed}\r\n                                size={this.state.size}\r\n                                changeAlgorithmType={this.changeAlgorithmType}\r\n                                resetArray={this.resetArray}\r\n                                startSort={this.startSort}\r\n                                changeSpeed={this.changeSpeed}\r\n                            />\r\n                    </Col>\r\n                    <Col sm={5}>\r\n                        <ComplexityGraph complexity={this.state.complexity}/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer;","export function bubbleSort(array) {\r\n    const animations = [];\r\n    const auxiliaryArray = array.slice();\r\n    let sorted = false;\r\n    while (sorted === false) {\r\n        sorted = true;\r\n        for (let i = 0; i < auxiliaryArray.length; i++) {\r\n            if (auxiliaryArray[i] > auxiliaryArray[i + 1]) {\r\n                const temp = auxiliaryArray[i + 1];\r\n                auxiliaryArray[i + 1] = auxiliaryArray[i];\r\n                auxiliaryArray[i] = temp;\r\n                animations.push([i, i + 1]);\r\n                sorted = false;\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\n","export function selectionSort(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    array = auxillaryArray;\r\n    const arrayLength = auxillaryArray.length;\r\n    for (let i = 0; i < arrayLength - 1; i++) {\r\n        //find smallest element in unsorted array\r\n        let minIndex = i;\r\n        for (let j = i + 1; j < arrayLength; j++) {\r\n            animations.push([\"firstComparison\", j, minIndex]);\r\n            animations.push([\"secondComparison\", j, minIndex]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\r\n        // Swap the minimum element with the first element\r\n        let temp = auxillaryArray[minIndex];\r\n        auxillaryArray[minIndex] = auxillaryArray[i];\r\n        auxillaryArray[i] = temp;\r\n    }\r\n    return [animations, array];\r\n}","import './App.css';\r\nimport SortingVisualizer from './SortingVisualizer.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     \t<SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}